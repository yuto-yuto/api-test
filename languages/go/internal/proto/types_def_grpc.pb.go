// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.3
// source: types_def.proto

package apitest

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TypesDefClient is the client API for TypesDef service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TypesDefClient interface {
	// rpc VariousDef(VariousDefRequest) returns (VariousDefResponse) {}
	WithInt64(ctx context.Context, in *WithInt64RequestResponse, opts ...grpc.CallOption) (*WithInt64RequestResponse, error)
	WithOneof(ctx context.Context, in *WithOneofRequest, opts ...grpc.CallOption) (*WithOneofResponse, error)
	WithPrimitive(ctx context.Context, in *WithPrimitiveRequest, opts ...grpc.CallOption) (*WithPrimitiveResponse, error)
	WithOptional(ctx context.Context, in *WithOptionalRequest, opts ...grpc.CallOption) (*WithOptionalResponse, error)
	WithRepeatedInt64(ctx context.Context, in *WithRepeatedInt64Request, opts ...grpc.CallOption) (*WithRepeatedInt64Response, error)
	WithRepeatedStringInt(ctx context.Context, in *WithRepeatedStringIntRequest, opts ...grpc.CallOption) (*WithRepeatedStringIntResponse, error)
	WithMap(ctx context.Context, in *WithMapRequest, opts ...grpc.CallOption) (*WithMapResponse, error)
	WithEnum(ctx context.Context, in *WithEnumRequestResponse, opts ...grpc.CallOption) (*WithEnumRequestResponse, error)
}

type typesDefClient struct {
	cc grpc.ClientConnInterface
}

func NewTypesDefClient(cc grpc.ClientConnInterface) TypesDefClient {
	return &typesDefClient{cc}
}

func (c *typesDefClient) WithInt64(ctx context.Context, in *WithInt64RequestResponse, opts ...grpc.CallOption) (*WithInt64RequestResponse, error) {
	out := new(WithInt64RequestResponse)
	err := c.cc.Invoke(ctx, "/TypesDef/WithInt64", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typesDefClient) WithOneof(ctx context.Context, in *WithOneofRequest, opts ...grpc.CallOption) (*WithOneofResponse, error) {
	out := new(WithOneofResponse)
	err := c.cc.Invoke(ctx, "/TypesDef/WithOneof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typesDefClient) WithPrimitive(ctx context.Context, in *WithPrimitiveRequest, opts ...grpc.CallOption) (*WithPrimitiveResponse, error) {
	out := new(WithPrimitiveResponse)
	err := c.cc.Invoke(ctx, "/TypesDef/WithPrimitive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typesDefClient) WithOptional(ctx context.Context, in *WithOptionalRequest, opts ...grpc.CallOption) (*WithOptionalResponse, error) {
	out := new(WithOptionalResponse)
	err := c.cc.Invoke(ctx, "/TypesDef/WithOptional", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typesDefClient) WithRepeatedInt64(ctx context.Context, in *WithRepeatedInt64Request, opts ...grpc.CallOption) (*WithRepeatedInt64Response, error) {
	out := new(WithRepeatedInt64Response)
	err := c.cc.Invoke(ctx, "/TypesDef/WithRepeatedInt64", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typesDefClient) WithRepeatedStringInt(ctx context.Context, in *WithRepeatedStringIntRequest, opts ...grpc.CallOption) (*WithRepeatedStringIntResponse, error) {
	out := new(WithRepeatedStringIntResponse)
	err := c.cc.Invoke(ctx, "/TypesDef/WithRepeatedStringInt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typesDefClient) WithMap(ctx context.Context, in *WithMapRequest, opts ...grpc.CallOption) (*WithMapResponse, error) {
	out := new(WithMapResponse)
	err := c.cc.Invoke(ctx, "/TypesDef/WithMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typesDefClient) WithEnum(ctx context.Context, in *WithEnumRequestResponse, opts ...grpc.CallOption) (*WithEnumRequestResponse, error) {
	out := new(WithEnumRequestResponse)
	err := c.cc.Invoke(ctx, "/TypesDef/WithEnum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TypesDefServer is the server API for TypesDef service.
// All implementations must embed UnimplementedTypesDefServer
// for forward compatibility
type TypesDefServer interface {
	// rpc VariousDef(VariousDefRequest) returns (VariousDefResponse) {}
	WithInt64(context.Context, *WithInt64RequestResponse) (*WithInt64RequestResponse, error)
	WithOneof(context.Context, *WithOneofRequest) (*WithOneofResponse, error)
	WithPrimitive(context.Context, *WithPrimitiveRequest) (*WithPrimitiveResponse, error)
	WithOptional(context.Context, *WithOptionalRequest) (*WithOptionalResponse, error)
	WithRepeatedInt64(context.Context, *WithRepeatedInt64Request) (*WithRepeatedInt64Response, error)
	WithRepeatedStringInt(context.Context, *WithRepeatedStringIntRequest) (*WithRepeatedStringIntResponse, error)
	WithMap(context.Context, *WithMapRequest) (*WithMapResponse, error)
	WithEnum(context.Context, *WithEnumRequestResponse) (*WithEnumRequestResponse, error)
	mustEmbedUnimplementedTypesDefServer()
}

// UnimplementedTypesDefServer must be embedded to have forward compatible implementations.
type UnimplementedTypesDefServer struct {
}

func (UnimplementedTypesDefServer) WithInt64(context.Context, *WithInt64RequestResponse) (*WithInt64RequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithInt64 not implemented")
}
func (UnimplementedTypesDefServer) WithOneof(context.Context, *WithOneofRequest) (*WithOneofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithOneof not implemented")
}
func (UnimplementedTypesDefServer) WithPrimitive(context.Context, *WithPrimitiveRequest) (*WithPrimitiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithPrimitive not implemented")
}
func (UnimplementedTypesDefServer) WithOptional(context.Context, *WithOptionalRequest) (*WithOptionalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithOptional not implemented")
}
func (UnimplementedTypesDefServer) WithRepeatedInt64(context.Context, *WithRepeatedInt64Request) (*WithRepeatedInt64Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithRepeatedInt64 not implemented")
}
func (UnimplementedTypesDefServer) WithRepeatedStringInt(context.Context, *WithRepeatedStringIntRequest) (*WithRepeatedStringIntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithRepeatedStringInt not implemented")
}
func (UnimplementedTypesDefServer) WithMap(context.Context, *WithMapRequest) (*WithMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithMap not implemented")
}
func (UnimplementedTypesDefServer) WithEnum(context.Context, *WithEnumRequestResponse) (*WithEnumRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithEnum not implemented")
}
func (UnimplementedTypesDefServer) mustEmbedUnimplementedTypesDefServer() {}

// UnsafeTypesDefServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TypesDefServer will
// result in compilation errors.
type UnsafeTypesDefServer interface {
	mustEmbedUnimplementedTypesDefServer()
}

func RegisterTypesDefServer(s grpc.ServiceRegistrar, srv TypesDefServer) {
	s.RegisterService(&TypesDef_ServiceDesc, srv)
}

func _TypesDef_WithInt64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithInt64RequestResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypesDefServer).WithInt64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TypesDef/WithInt64",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypesDefServer).WithInt64(ctx, req.(*WithInt64RequestResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypesDef_WithOneof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithOneofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypesDefServer).WithOneof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TypesDef/WithOneof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypesDefServer).WithOneof(ctx, req.(*WithOneofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypesDef_WithPrimitive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithPrimitiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypesDefServer).WithPrimitive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TypesDef/WithPrimitive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypesDefServer).WithPrimitive(ctx, req.(*WithPrimitiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypesDef_WithOptional_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithOptionalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypesDefServer).WithOptional(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TypesDef/WithOptional",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypesDefServer).WithOptional(ctx, req.(*WithOptionalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypesDef_WithRepeatedInt64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithRepeatedInt64Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypesDefServer).WithRepeatedInt64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TypesDef/WithRepeatedInt64",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypesDefServer).WithRepeatedInt64(ctx, req.(*WithRepeatedInt64Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypesDef_WithRepeatedStringInt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithRepeatedStringIntRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypesDefServer).WithRepeatedStringInt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TypesDef/WithRepeatedStringInt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypesDefServer).WithRepeatedStringInt(ctx, req.(*WithRepeatedStringIntRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypesDef_WithMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypesDefServer).WithMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TypesDef/WithMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypesDefServer).WithMap(ctx, req.(*WithMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypesDef_WithEnum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithEnumRequestResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypesDefServer).WithEnum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TypesDef/WithEnum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypesDefServer).WithEnum(ctx, req.(*WithEnumRequestResponse))
	}
	return interceptor(ctx, in, info, handler)
}

// TypesDef_ServiceDesc is the grpc.ServiceDesc for TypesDef service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TypesDef_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TypesDef",
	HandlerType: (*TypesDefServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WithInt64",
			Handler:    _TypesDef_WithInt64_Handler,
		},
		{
			MethodName: "WithOneof",
			Handler:    _TypesDef_WithOneof_Handler,
		},
		{
			MethodName: "WithPrimitive",
			Handler:    _TypesDef_WithPrimitive_Handler,
		},
		{
			MethodName: "WithOptional",
			Handler:    _TypesDef_WithOptional_Handler,
		},
		{
			MethodName: "WithRepeatedInt64",
			Handler:    _TypesDef_WithRepeatedInt64_Handler,
		},
		{
			MethodName: "WithRepeatedStringInt",
			Handler:    _TypesDef_WithRepeatedStringInt_Handler,
		},
		{
			MethodName: "WithMap",
			Handler:    _TypesDef_WithMap_Handler,
		},
		{
			MethodName: "WithEnum",
			Handler:    _TypesDef_WithEnum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "types_def.proto",
}
